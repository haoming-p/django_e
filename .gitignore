新建文件夹
cd Projects
mkdir django
cd django

建virtual environment
pipenv install django
pipenv shell    # 激活virtual environment

code .  # vscode打开
如果环境不对:
deactivate
pipenv --venv   shows where the virtual environment is located at
source /Users/phm/.local/share/virtualenvs/django-vKCRLopW/bin/activate     activate the env
which python    确认正确的env
echo $DJANGO_SETTINGS_MODULE    确认正确的DJANGO_SETTINGS_MODULE, 如果不对：
export DJANGO_SETTINGS_MODULE=storefront.settings   storefront是放settings.py的文件夹


新建项目
django-admin startproject name . # 比如django-admin startproject storefront .
运行server
python manage.py runserver 8006  # 可以打开看到django 

新建APP
python manage.py startapp name  # 比如python manage.py startapp playground
在storefront, settings.py, INSTALLED_APPS, 增加'playground'

playground中:
1. views.py
    request handler, take a request, return a response
2. 新建urls.py
    map urls with view functions

storefront中:
3. urls.py
    把playground urls.py中的path加到storefront的path
    然后http://127.0.0.1:8006/playground/hello/ 可以看到views中的内容
注意只有首次打开http://127.0.0.1:8006/会看到django成功, 添加url后就要看http://127.0.0.1:8006/playground/hello/

playground中:
1. 新建folder, templates folder, 新建file, hello.html
2. views.py中, return render(request, 'hello.html') 然后刷新可以看到

debug:
点run and debug, 点create a launch.json file, 搜索框选Python Debugger, 选Django, 打开launch.json
args中加上portal
"args": [
            "runserver",
            "8006"
        ],
launch.json会在.vscode文件夹中找到
views.py中添加breakpoint -> 会执行所有代码直到breakpoint, from breakpoint, we can execute code line by line
debug需要关闭port
打开http://127.0.0.1:8006/playground/hello/, activate the breakpoint -> step over, 可以在WATCH中添加variable


django debug toolbar:
1. pipenv install django-debug-toolbar
2. storefront, settings.py, INSTALLED_APPS中添加 'debug_toolbar',
3. storefront, urls.py, urlpatterns添加 + debug_toolbar_urls(), 和 from debug_toolbar.toolbar import debug_toolbar_urls
4. storefront, settings.py, MIDDLEWARE添加 "debug_toolbar.middleware.DebugToolbarMiddleware",
5. storefront, settings.py, 添加
    INTERNAL_IPS = [
        # ...
        "127.0.0.1",
        # ...
    ]
6. hello.html中,需要使用正确的html格式, <html><body> </body></html>, 不然debug toolbar不会显示
7. 再打开可以看到django debug toolbar

正式开始：
1. 建立APP
e-commerce建立2个app(store, tags):
python manage.py startapp store
python manage.py startapp tags
python manage.py startapp likes
storefront, settings.py, INSTALLED_APPS中添加'store', 'tags', 'likes'

2. 建立models
store -> models.py
define Collection class, Prodect class, Custom class等, 建立class之间的关系(1 to 1, 1 to many, many to many)
比如：
class Product(models.Model):    
    # https://docs.djangoproject.com/en/5.1/ref/models/fields/
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2) # 9999.99
    inventory = models.IntegerField()
    last_update = models.DateTimeField(auto_now=True)
tags -> modles.py

3. set up database
django不是手动设置数据库, 而是做好models后使用migration
3.1
python manage.py makemigrations
成功后如下, 可以command+点击打开
Migrations for 'likes':
  likes/migrations/0001_initial.py
    + Create model LikedItem
可以看到migrations文件夹
变更model再次运行python manage.py makemigrations, django会自己识别并处理更新
3.2
python manage.py migrate
django will go through all pending migrations
完成后会看到db.sqlite3
3.3
安装SQLite extention, 可以看到SQLITE EXPLORER, 下面有用的的表

4. customize database schema
store -> models.py -> class Customer中, class Meta, 可以用command+t输入customer快速打开
做完后migrate
revert migration: python manage.py migrate store 0003, 会返回0003, 把新加的class Meta去掉, 把0004去掉



lsof -i :8006
kill -9 <PID>
python manage.py runserver 8006

连接git
git init
git remote add origin https://github.com/haoming-p/django_e
添加gitignore
git add .
通过git status查看状态
git commit -m "initial: add django project files"
git push -u origin main
git log --oneline   看到上一次的commit

command + b, 展开/收缩左边栏





# Byte-compiled / optimized / DLL files
*.pyc
__pycache__/

# Virtual environment
# Exclude the globally managed virtualenv folder
# Your virtualenv is managed outside the project so it's safe to ignore locally managed ones
venv/
*.env

# Environment variables file
.env

# SQLite database
db.sqlite3

# Logs
*.log

# Static files and media files dynamically generated by Django
static/
media/

# IDE settings and OS-specific files
.vscode/
.idea/
.DS_Store

# Pipenv-related files
# intentionally _ignored-db.sqlite-related db/ build to `setup files` by user workspace codes`.
